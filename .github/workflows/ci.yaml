name: CI

on:
  push:
    branches: [master]
  pull_request:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  rust_toolchain: nightly-2022-02-09

jobs:
  format-rust:
    name: "Rust Formatting"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Rust ${{ env.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_toolchain }}
          profile: minimal
          override: true
          components: rustfmt, clippy
      - name: Cache Rust package builds
        uses: Swatinem/rust-cache@v1
      - name: Check Rust formatting
        run: cargo fmt -- --check
      - name: Check Clippy linting
        run: cargo clippy --all --tests --all-features

  build-rust:
    name: "Rust Build"
    runs-on: ubuntu-latest
    needs: format-rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install Rust ${{ env.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_toolchain }}
          profile: minimal
          override: true
      - name: Cache Rust package builds
        uses: Swatinem/rust-cache@v1
      - name: Build
        run: cargo build --examples --verbose
      - name: Run tests
        run: cargo test --verbose

  ros-integration:
    name: "ROS Integration"
    runs-on: ubuntu-latest
    container: ros:noetic
    needs: format-rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install curl
        run: apt-get update; apt-get -y install curl
      - name: Install Rust ${{ env.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_toolchain }}
          profile: minimal
          override: true
      - name: Cache Rust package builds
        uses: Swatinem/rust-cache@v1
      - name: Build
        shell: bash
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          cargo build --examples --verbose --features=ros
      - name: Run tests
        shell: bash
        run: |
          source /opt/ros/$ROS_DISTRO/setup.bash
          cargo test --verbose --features=ros

  format-python:
    name: "Python Formatting / Type Verification"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Check Python imports
        uses: isort/isort-action@master
        with:
          configuration: "--check-only --diff --profile black"
      - name: Check Black formatting
        uses: psf/black@stable
        with:
          options: "--check --diff --color"
      - name: Check Flake8 compatibility
        run: |
          python -m pip install flake8==3.9.2 flake8-quotes
          flake8 --inline-quotes="double" ./python/doc/
          flake8 --inline-quotes="double" ./python/
      - name: Check type correctness.
          python -m pip install mypy
          mypy ./python/erdos/

  build-python:
    name: "Python ${{ matrix.python-version }} Build"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    needs: [format-python, format-rust]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust ${{ env.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.rust_toolchain }}
          profile: minimal
          override: true
      - name: Cache Rust package builds
        uses: Swatinem/rust-cache@v1
      - name: Build
        run: |
          python -m pip install maturin
          cd python && maturin build
